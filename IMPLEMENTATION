Set Up Git Repo


Implementation 

1. Fork the starter repo
This tutorial assumes you have an existing GitHub account and Git installed on your computer. If you don't have either of these two installed, you can follow these step-by-step instructions.

- In a new browser tab, navigate to GitHub and make sure you are logged into your account.
- In that same tab, open the aws-elastic-beanstalk-express-js-sample repo.
- Choose the white Fork button on the top right corner of the screen. Next, you will see a small window asking you where you would like to fork the repo.
- Verify it is showing your account and choose Create a fork. After a few seconds, your browser will display a copy of the repo in your account under Repositories.

2. Push a change to your new repo

- Go to the repository and choose the green Code button near the top of the page.
- To clone the repository using HTTPS, confirm that the heading says Clone with HTTPS. If not, select the Use HTTPS link.
- Choose the white button with a clipboard icon on it (to the right of the URL).
- In the terminal or Bash platform, whichever you are using, enter the following command and paste the URL you just copied in Step 2 when you clicked the clipboard icon. Be sure to change "YOUR-USERNAME" to your GitHub username. You should see a message in your terminal that starts with Cloning into. This command creates a new folder that has a copy of the files from the GitHub repo.

- In the new folder there is a file named app.js. Open app.js in your favorite code editor.
- Change the message in line 5 to say something other than "Hello World!" and save the file.
- Go to the folder created with the name aws-elastic-beanstalk-express-js-sample/ and Commit the change with the following commands:
3. Test your change 
- In your browser window, open GitHub.
- In the left navigation panel, under Repositories, select the one named aws-elastic-beanstalk-express-js-sample.
- Choose the app.js file. The contents of the file, including your change, should be displayed.
We have created a code repository containing a simple Hello World! web app. We will be using this repository as the trigger for our continuous delivery pipeline. It's important to set it up properly so we push code to it.

Deploy Web app

Implementation
1. Configure an AWS elastic Beanstalk app

- In a new browser tab, open the AWS Elastic Beanstalk console.
- Choose the orange Create Application button.
- In the textbox under the heading Application name, enter DevOpsGettingStarted.
- Select Node.js from the Platform dropdown menu. This selection should automatically fill in the Platform branch and Platform version menus further down the screen.
- Confirm that the radio button next to Sample application is selected.
- Choose the orange Create application button at the bottom of the page.
  
  While waiting for deployment, you should see:
- A small black window with white text. This screen will display status messages for our environment.
- After a few minutes have passed, you will see a large green checkmark on your screen.
- Once you see the green checkmark, you have successfully created an AWS Elastic Beanstalk application and deployed it to an environment.
To test your sample web app, select the link under the name of your environment.
Create Build Project

Implementation 

1. Configure the AWS Code Build Project 

- In a new browser tab, open the AWS CodeBuild console.
- Choose the orange Create project button.
- In the Project name field, enter Build-DevOpsGettingStarted.
- Select GitHub from the Source provider dropdown menu.
- Confirm that the Connect using OAuth radio button is selected.
- Choose the white Connect to GitHub button. A new browser tab will open asking you to give AWS CodeBuild access to your GitHub repo.
- Choose the green Authorize aws-codesuite button.
- Enter your GitHub password.
- Choose the orange Confirm button.
- Select Repository in my GitHub account.
- Enter aws-elastic-beanstalk-express-js-sample in the search field.
- Select the repo you forked in Module 1.
-  Confirm that Managed Image is selected.
- Select Amazon Linux 2 from the Operating system dropdown menu.
- Select Standard from the Runtime(s) dropdown menu.
- Select aws/codebuild/amazonlinux2-x86_64-standard:3.0 from the Image dropdown menu.
- Confirm that Always use the latest image for this runtime version is selected for Image version.
- Confirm that Linux is selected for Environment type.
- Confirm that New service role is selected.

2. Create a Buildspec file for the project 

- Select Insert build commands.
- Choose Switch to editor.
- Replace the Buildspec in the editor with the code below:
version: 0.2   
phases:
    build:
        commands:
            - npm i --save
artifacts:
    files:
        - '**/*'



- Choose the orange Create build project button. You should now see a dashboard for your project.
- Choose the orange Start build button. This will load a page to configure the build process.
- Confirm that the loaded page references the correct GitHub repo.
- Choose the orange Start build button.
- Wait for the build to complete. As you are waiting you should see a green bar at the top of the page with the message Build started, the progress for your build under Build log, and, after a couple minutes, a green checkmark and a Succeeded message confirming the build worked.



Create Delivery Pipeline 

implementation 

1. create a new pipeline

- In a browser window, open the AWS CodePipeline console.
- Choose the orange Create pipeline button. A new screen will open up so you can set up the pipeline.
- In the Pipeline name field, enter Pipeline-DevOpsGettingStarted.
- Confirm that New service role is selected.
- Choose the orange Next button.

2. configure the source stage 

- Select GitHub version 1 from the Source provider dropdown menu.
- Choose the white Connect to GitHub button. A new browser tab will open asking you to give AWS CodePipeline access to your GitHub repo.
- Choose the green Authorize aws-codesuite button. Next, you will see a green box with the message You have successfully configured the action with the provider.
- From the Repository dropdown, select the repo you created in Module 1.
- Select main from the branch dropdown menu.
- Confirm that GitHub webhooks is selected.
- Choose the orange Next button.

3. Configure the build stage 

- From the Build provider dropdown menu, select AWS CodeBuild.
- Under Region confirm that the US West (Oregon) Region is selected.
- Select Build-DevOpsGettingStarted under Project name.
- Choose the orange Next button.

4. Configure the deploy stage 

- Select AWS Elastic Beanstalk from the Deploy provider dropdown menu.
- Under Region, confirm that the US West (Oregon) Region is selected.
- Select the field under Application name and confirm you can see the app DevOpsGettingStarted created in Module 2.
- Select DevOpsGettingStarted-env from the Environment name textbox.
- Choose the orange Next button. You will now see a page where you can review the pipeline configuration.
- Choose the orange Create pipeline button.




5. watch first pipeline execution 

- While watching the pipeline execution, you will see a page with a green bar at the top. This page shows all the steps defined for the pipeline and, after a few minutes, each will change from blue to green.
  
  Once the Deploy stage has switched to green and it says Succeeded, choose AWS Elastic Beanstalk. A new tab listing your AWS Elastic Beanstalk environments will open.Select the URL in the Devopsgettingstarted-env row. You should see a webpage with a white background and the text you included in your GitHub commit in Module 1.




Finalize Pipeline and Test

Implementation 

1. create review stage in pipeline 

By adding a manual review stage, you are adding an additional layer of quality control to your pipeline, which can help ensure that only high-quality, tested changes are deployed to production. This can help reduce the risk of downtime, errors, and other issues that can have a negative impact on your business.

- Open the AWS CodePipeline console.
- You should see the pipeline we created in Module 4, which was called Pipeline-DevOpsGettingStarted. Select this pipeline.
- Choose the white Edit button near the top of the page.
- Choose the white Add stage button between the Build and Deploy stages.
- In the Stage name field, enter Review.
- Choose the orange Add stage button.
- In the Review stage, choose the white Add action group button.
- Under Action name, enter Manual_Review.
- From the Action provider dropdown, select Manual approval.
- Confirm that the optional fields have been left blank.
- Choose the orange Done button.
- Choose the orange Save button at the top of the page.
- Choose the orange Save button to confirm the changes. You will now see your pipeline with four stages: Source, Build, Review, and Deploy.

2. Push a new commit to your repo

- In your favorite code editor, open the app.js file from Module 1.
- Change the message in Line 5.
- Save the file.
- Open your preferred Git client.
- Navigate to the folder created in Module 1.
- Commit the change with the following commands:



3. Monitor the pipeline and manually approve the change 

- Navigate to the AWS CodePipeline console.
- Select the pipeline named Pipeline-DevOpsGettingStarted. You should see the Source and Build stages switch from blue to green.
- When the Review stage switches to blue, choose the white Review button.
- Write an approval comment in the Comments textbox.
- Choose the orange Approve button.
- Wait for the Review and Deploy stages to switch to green.
- Select the AWS Elastic Beanstalk link in the Deploy stage. A new tab listing your Elastic Beanstalk environments will open.
- Select the URL in the Devopsgettingstarted-env row. You should see a webpage with a white background and the text you had in your most recent GitHub commit.

Congratulations! You have a fully functional continuous delivery pipeline hosted on AWS.





We have used AWS CodePipeline to add a review stage with manual approval to our continuous delivery pipeline. Now, our code changes will have to be reviewed and approved before they are deployed to AWS Elastic Beanstalk.
